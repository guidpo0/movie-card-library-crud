{"version":3,"sources":["components/MovieCard.js","components/Loading.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","components/MovieForm.js","pages/NewMovie.js","pages/MovieDetails.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","this","props","movie","title","storyline","id","imagePath","data-testid","className","src","alt","to","React","Component","Loading","movies","subtitle","rating","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","MovieList","state","status","then","setState","map","key","MovieForm","handleSubmit","bind","onSubmit","field","newValue","htmlFor","placeholder","type","value","onChange","event","updateMovie","target","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","NewMovie","newMovie","movieData","history","nextId","length","push","MovieDetails","deleteMovie","match","params","movieAPI","filter","EditMovie","updatedMovie","shouldRedirect","NotFound","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ba96732.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './MovieCard.css';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie: { title, storyline, id, imagePath } } = this.props;\n    return (\n      <div data-testid=\"movie-card\" className=\"movie-card\">\n        <img src={ imagePath } alt={ title } />\n        <h3>{ title }</h3>\n        <p>{ storyline }</p>\n        <Link to={ `/movies/${id}` }>\n          VER DETALHES\n        </Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    imagePath: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React, { Component } from 'react';\nimport './Loading.css';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"loading\">Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\nimport * as movieAPI from '../services/movieAPI';\nimport './MovieList.css';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      status: 'loading',\n    };\n  }\n\n  componentDidMount() {\n    movieAPI.getMovies().then((movies) => this.setState(() => (\n      { movies, status: 'ready' }\n    )));\n  }\n\n  render() {\n    const { movies, status } = this.state;\n    return (\n      <div className=\"movie-list-container\">\n        { status === 'loading' ? <Loading />\n          : (\n            <div data-testid=\"movie-list\" className=\"movie-list\">\n              {movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n            </div>\n          ) }\n        <Link className=\"add-card-link\" to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_title\">\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n          Título\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_subtitle\">\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n          Subtítulo\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label htmlFor=\"movie_image\">\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n          Imagem\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_storyline\">\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n          Sinopse\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"movie_rating\">\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n          Avaliação\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape().isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(newMovie) {\n    const { history } = this.props;\n    movieAPI.createMovie(newMovie).then(() => history.push('/'));\n  }\n\n  render() {\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  history: PropTypes.func.isRequired,\n};\n\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movie: {},\n      status: 'loading',\n    };\n    this.deleteMovie = this.deleteMovie.bind(this);\n  }\n\n  componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    movieAPI.getMovie(id).then((movie) => this.setState(\n      { movie, status: 'ready' },\n    ));\n  }\n\n  deleteMovie(movieId) {\n    movieAPI.deleteMovie(movieId);\n  }\n\n  render() {\n    const { match: { params: { id } } } = this.props;\n    const {\n      movie: { title, storyline, imagePath, genre, rating, subtitle },\n      status,\n    } = this.state;\n    return (\n      status === 'loading' ? <Loading />\n        : (\n          <div data-testid=\"movie-details\">\n            <img alt=\"Movie Cover\" src={ `../${imagePath}` } />\n            <p>{ `Title: ${title}` }</p>\n            <p>{ `Subtitle: ${subtitle}` }</p>\n            <p>{ `Storyline: ${storyline}` }</p>\n            <p>{ `Genre: ${genre}` }</p>\n            <p>{ `Rating: ${rating}` }</p>\n            <Link to={ `/movies/${id}/edit` }>\n              EDITAR\n            </Link>\n            <Link to=\"/\">\n              VOLTAR\n            </Link>\n            <Link to=\"/\" onClick={ () => this.deleteMovie(id) }>\n              DELETAR\n            </Link>\n          </div>\n        )\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movie: {},\n      status: 'loading',\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { match: { params: { id } } } = this.props;\n    movieAPI.getMovie(id).then((movie) => this.setState(() => (\n      { movie, status: 'ready' }\n    )));\n  }\n\n  handleSubmit(updatedMovie) {\n    const { history } = this.props;\n    movieAPI.updateMovie(updatedMovie).then(() => history.push('/'));\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      // Redirect\n    }\n\n    return (\n      status === 'loading' ? <Loading />\n        : (\n          <div data-testid=\"edit-movie\">\n            <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n          </div>\n        )\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  }).isRequired,\n  history: PropTypes.func.isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport NewMovie from './pages/NewMovie';\nimport MovieDetails from './pages/MovieDetails';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <header>\n        <h1 className=\"header-title\">Movie Cards Library</h1>\n      </header>\n      <BrowserRouter basename=\"/movie-cards-library-crud\">\n        <Switch>\n          <Route exact path=\"/\" component={ MovieList } />\n          <Route exact path=\"/movies/new\" component={ NewMovie } />\n          <Route exact path=\"/movies/:id\" component={ MovieDetails } />\n          <Route exact path=\"/movies/:id/edit\" component={ EditMovie } />\n          <Route path=\"\" component={ NotFound } />\n        </Switch>\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}